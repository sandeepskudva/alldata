package Creationpages;

import java.io.IOException;
import java.util.Random;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.vector.func.Genric;
import com.vector.func.SuperBase;



public class TagsPage extends SuperBase {
	
	static Genric  g = new Genric();
	
	

	
	
	
	public void filltagSection(ExtentReports report,ExtentTest logger,int Rownum) throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
			try{	
		    String country = g.ExcelRead(detail, Sheetpath, Rownum, 10);		   
		    String state = g.ExcelRead(detail, Sheetpath, Rownum, 8);
		    String platetype = g.ExcelRead(detail, Sheetpath, Rownum, 19);
		    String vehicletype = g.ExcelRead(detail, Sheetpath, Rownum, 20); 
		    String pmake = g.ExcelRead(detail, Sheetpath, Rownum, 21); 
		    String pmodel = g.ExcelRead(detail, Sheetpath, Rownum, 22); 
		    String pyear = g.ExcelRead(detail, Sheetpath, Rownum, 23); 
		    
		  
		   	    
		    addplate(driver, country,state, platetype, vehicletype, pmake, pmodel,pyear) ; 
		    addtag(driver,"1","0");
		    clickPlansPayments(driver);
		  //  ReportLibrary.addStep(ReportLibrary.Test_Step_Number, "Adding contact details in first page", LogStatus.INFO, true);
		    r.addstep(driver, report, logger, "Pass", testcasenumber,"tags and Payments Page Passed",false);
		    System.out.println("Completed filling tags and Payments Page");  	
			}
			catch(Exception allexception)
			{
				r.addstep(driver, report, logger, "Fail", testcasenumber,"tags and Payments Page Failed" , true);
				System.out.println("Error occured in filling tags and Payments Page "+allexception.getMessage());
							
			}
		    
			
		
		
	}
	
	
	
	
	public static char randomCharacter() {
		Random r = new Random();
		char c = (char)(r.nextInt(26) + 'a');
		return c;
	}
	
	
	
	
	
	public void addplate(WebDriver driver,String country,String state,String platetype,String vehicletype,String pmake, String pmodel,String pyear) throws InterruptedException 
	{
		   
		
		    int RandomNum =  1000 +(int)(Math.random() * 9999); 
		    String pname = randomCharacter()+(RandomNum+"")+randomCharacter();
		    
		WebElement plate_number =driver.findElement(By.xpath("//input[@name='vehicleid[0].vehicleLicense']"));
		plate_number.sendKeys(pname);
        		
		WebElement plate_country = driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleCountry']"));
		plate_country.sendKeys(country);
		
		WebElement plate_state = driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleState']"));
		plate_state.sendKeys(state);
		
		Select dropdown2 = new Select(driver.findElement(By.xpath("//select[@name='vehicleid[0].vehiclePlateType']")));
		dropdown2.selectByIndex(0);
		
		Select dropdown3 = new Select(driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleType']")));
		dropdown3.selectByIndex(Integer.parseInt(vehicletype));
		
		Thread.sleep(2000);
		
		try{
		    // Waits for 20 seconds
		    WebDriverWait wait = new WebDriverWait(driver, 20);

		    // Wait until expected condition size of the dropdown increases and becomes more than 1
		    wait.until((ExpectedCondition<Boolean>) new ExpectedCondition<Boolean>(){
		        public Boolean apply(WebDriver driver)  
		        {
		        	Select dropdown4 = new Select(driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleMake']")));
					
				   
		            return dropdown4.getOptions().size()>1;
		        }
		    });

		    //To select the first option
		    
		    Select dropdown4 = new Select(driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleMake']")));
		    dropdown4.selectByIndex(Integer.parseInt(pmake));
		    
		   
		}catch(Throwable e){
		    System.out.println("Error found: "+e.getMessage());
		}
		

		
		
		
		Select dropdown5 = new Select(driver.findElement(By.xpath("//select[@name='vehicleid[0].vehicleModel']")));
		dropdown5.selectByIndex(Integer.parseInt(pmodel));
		
		
		WebElement year= driver.findElement(By.xpath("//input[@name='vehicleid[0].vehicleYear']"));
		year.sendKeys(pyear);
        
	    
		
	}
	
	public void addtag(WebDriver driver,String interior,String exterior) throws InterruptedException
	{
		try{
			WebElement interiornum =driver.findElement(By.xpath("//select[@name='interiorTollTagsNo']"));		
		    interiornum.sendKeys(interior);	
		    WebElement exteriornum =driver.findElement(By.xpath("//select[@name='exteriorTollTagsNo']"));
		    exteriornum.sendKeys(exterior);
		}
		catch(Exception allexception)
		{
			System.out.println("Error occured in filling Plan Section "+allexception.getMessage());
		
		}
		   
		    
		    
	}
	
	public void clickPlansPayments(WebDriver driver) throws InterruptedException
	{
		try{
		WebElement nextbtn =driver.findElement(By.xpath("//button[@name='btnPlansAndPayment']"));
		nextbtn.click();	
		Thread.sleep(5000);
		}
		catch(Exception allexception)
		{
			System.out.println("Error occured in filling Plan Section "+allexception.getMessage());
		
		}
		    
		    
	}
	

}
